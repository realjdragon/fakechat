{"version":3,"sources":["component/images/profile.jpg","component/Chat.js","component/ChatWindow.js","component/ChatInput.js","component/HeaderProfile.js","component/ChatContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","React","memo","sender","message","className","classnames","contenteditable","ChatWindow","chatList","messages","map","key","id","firstUpdate","useRef","useEffect","current","chatWindow","document","querySelector","scrollTop","scrollHeight","ChatInput","onInsert","useState","myMessage","setMyMessage","yourMessage","setYourMessage","onSubmit","e","preventDefault","placeholder","name","value","onChange","target","type","HeaderProfile","src","profile","alt","onKeyPress","which","handleKeyPress","ChatContainer","setMessages","nextId","useCallback","trim","newMessage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,qC,wQCe5BC,MAAMC,MAXR,SAAC,GAA2B,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,QAEvB,OACE,yBAAKC,UAAWC,IAAW,OAAmB,IAAXH,EAAe,QAAU,SAC1D,yBAAKE,UAAU,SAASE,gBAAgB,QACpCH,OCoBKI,G,MAzBI,SAAC,GAAkB,IAC9BC,EAD6B,EAAfC,SACMC,KAAI,SAAAP,GAAO,OAAI,kBAAC,EAAD,CAAMD,OAAQC,EAAQD,OAAQC,QAASA,EAAQA,QAASQ,IAAKR,EAAQS,QAExGC,EAAcC,kBAAO,GAe3B,OAbAC,qBAAU,WACR,GAAIF,EAAYG,QACdH,EAAYG,SAAU,MADxB,CAQA,IAAMC,EAAaC,SAASC,cAAc,eAC1CF,EAAWG,UAAYH,EAAWI,iBAIlC,yBAAKjB,UAAU,cACZI,KCaQc,G,MAlCG,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACAC,mBAAS,IADT,mBAC3BC,EAD2B,KAChBC,EADgB,OAEIF,mBAAS,IAFb,mBAE3BG,EAF2B,KAEdC,EAFc,KAIlC,OACE,yBAAKxB,UAAU,aACb,yBAAKA,UAAU,aACb,8CACA,0BAAMyB,SAAU,SAACC,GAAOA,EAAEC,iBAAkBR,EAASE,EAAW,GAAIC,EAAa,MAC/E,2BACEM,YAAY,aACZC,KAAK,YACLC,MAAOT,EACPU,SAAU,SAACL,GAAD,OAAOJ,EAAaI,EAAEM,OAAOF,QACvCG,KAAK,SACP,0CAGJ,yBAAKjC,UAAU,aACb,8CACA,0BAAMyB,SAAU,SAACC,GAAOA,EAAEC,iBAAkBR,EAASI,EAAa,GAAIC,EAAe,MACnF,2BACEI,YAAY,eACZC,KAAK,cACLC,MAAOP,EACPQ,SAAU,SAACL,GAAD,OAAOF,EAAeE,EAAEM,OAAOF,QACzCG,KAAK,SACL,6C,wBCPGC,EAnBO,WAOpB,OACE,yBAAKlC,UAAU,iBACb,yBAAKA,UAAU,gBACb,yBAAKmC,IAAKC,IAASC,IAAI,oCAEzB,yBAAKrC,UAAU,eACb,0BAAMA,UAAU,YAAYE,gBAAgB,OAAOoC,WAAY,SAACZ,GAAD,OAZ5C,SAACA,GACN,KAAZA,EAAEa,OACJb,EAAEC,iBAUoEa,CAAed,KAArF,SADF,IACwG,0BAAM1B,UAAU,SAAhB,QC4B/FyC,EAxCO,WACpB,IAD0B,EAaMrB,mBAXhB,IAFU,mBAanBf,EAbmB,KAaTqC,EAbS,KAepBC,EAASjC,iBAAO,IAEhBS,EAAWyB,uBACf,SAAC7C,EAASD,GACR,GAAuB,KAAnBC,EAAQ8C,OAAZ,CACA,IAAMC,EAAa,CACjBtC,GAAImC,EAAO/B,QACXd,SACAC,WAEF2C,GAAY,SAAArC,GAAQ,4BAAQA,GAAR,CAAkByC,OACtCH,EAAO/B,SAAW,KAEpB,IAGF,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYP,SAAUA,IACtB,kBAAC,EAAD,CAAWc,SAAUA,M,MC5BZ4B,MARf,WACE,OACE,yBAAK/C,UAAU,OACb,kBAAC,EAAD,QCKcgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzC,SAAS0C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMjE,c","file":"static/js/main.ed852db9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.f85df2f1.jpg\";","import React from 'react';\r\nimport './Chat.scss';\r\nimport classnames from 'classnames';\r\n\r\nconst Chat = ( { sender, message } ) => {\r\n\r\n  return (\r\n    <div className={classnames('Chat', sender === 0 ? 'right' : 'left')}>\r\n      <div className=\"bubble\" contenteditable=\"true\">\r\n        { message }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Chat);","import React, { useEffect, useRef } from 'react';\r\nimport Chat from './Chat';\r\nimport './ChatWindow.scss';\r\n\r\nconst ChatWindow = ({ messages }) => {\r\n  const chatList = messages.map(message => <Chat sender={message.sender} message={message.message} key={message.id} />);\r\n\r\n  const firstUpdate = useRef(true);\r\n\r\n  useEffect(() => {\r\n    if (firstUpdate.current) {\r\n      firstUpdate.current = false;\r\n      return;\r\n    }\r\n\r\n    // 메시지 입력할 때마다 스크롤 내리기\r\n    // 나중에는 삭제 수정도 해야해서 사실 이런 식으로 처리하면 안 됨\r\n    // 분명히 고치게 될 거임\r\n    const chatWindow = document.querySelector('.ChatWindow');\r\n    chatWindow.scrollTop = chatWindow.scrollHeight;\r\n  });\r\n\r\n  return (\r\n    <div className=\"ChatWindow\">\r\n      {chatList}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;","import React, { useState } from 'react';\r\nimport './ChatInput.scss';\r\n\r\nconst ChatInput = ({ onInsert }) => {\r\n  const [myMessage, setMyMessage] = useState('');\r\n  const [yourMessage, setYourMessage] = useState('');\r\n\r\n  return (\r\n    <div className=\"ChatInput\">\r\n      <div className=\"input-box\">\r\n        <span>👉</span>\r\n        <form onSubmit={(e) => {e.preventDefault(); onInsert(myMessage, 0); setMyMessage('');}}>\r\n          <input\r\n            placeholder=\"My Message\"\r\n            name=\"myMessage\"\r\n            value={myMessage}\r\n            onChange={(e) => setMyMessage(e.target.value)}\r\n            type=\"text\"/>\r\n          <button>Send</button>\r\n        </form>\r\n      </div>\r\n      <div className=\"input-box\">\r\n        <span>👈</span>\r\n        <form onSubmit={(e) => {e.preventDefault(); onInsert(yourMessage, 1); setYourMessage('');}}>\r\n          <input\r\n            placeholder=\"Your Message\"\r\n            name=\"yourMessage\"\r\n            value={yourMessage}\r\n            onChange={(e) => setYourMessage(e.target.value)}\r\n            type=\"text\"/>\r\n            <button>Send</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInput;","import React from 'react';\r\nimport './HeaderProfile.scss';\r\nimport profile from './images/profile.jpg';\r\n\r\nconst HeaderProfile = () => {\r\n    const handleKeyPress = (e) => {\r\n      if (e.which === 13) {\r\n        e.preventDefault();\r\n      }\r\n    };\r\n\r\n  return (\r\n    <div className=\"HeaderProfile\">\r\n      <div className=\"profileImage\">\r\n        <img src={profile} alt=\"프로필사진\" />\r\n      </div>\r\n      <div className=\"profileName\">\r\n        <span className=\"typedName\" contenteditable=\"true\" onKeyPress={(e) => handleKeyPress(e)}>James</span> <span className=\"arrow\">></span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HeaderProfile;","import React, { useState, useRef, useCallback } from 'react';\r\nimport ChatWindow from './ChatWindow';\r\nimport ChatInput from './ChatInput';\r\nimport HeaderProfile from './HeaderProfile';\r\n\r\nconst ChatContainer = () => {\r\n  const createDummyMessage = () => {\r\n    const array = [];\r\n    // for (let i = 0; i < 18; i++) {\r\n    //   array.push({\r\n    //     id: i,\r\n    //     sender: i%3,\r\n    //     message: 'hi guys'\r\n    //   });\r\n    // }\r\n    return array;\r\n  };\r\n\r\n  const [messages, setMessages] = useState(createDummyMessage());\r\n\r\n  const nextId = useRef(18);\r\n\r\n  const onInsert = useCallback(\r\n    (message, sender) => {\r\n      if (message.trim() === '') return;\r\n      const newMessage = {\r\n        id: nextId.current,\r\n        sender,\r\n        message\r\n      };\r\n      setMessages(messages => [...messages, newMessage]);\r\n      nextId.current += 1;\r\n    },\r\n    [],\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <HeaderProfile />\r\n      <ChatWindow messages={messages}/>\r\n      <ChatInput onInsert={onInsert}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatContainer;","import React from 'react';\nimport ChatContainer from './component/ChatContainer'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ChatContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}